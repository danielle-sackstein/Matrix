danielle.s
=============================
=  README For ex3 =
=============================
The results of TimeChecker:
without optimisations (without the flag -O):

           |                50 X 50                |              500 X 500
___________|_______ + _________|_______ * _________|________ + _______|_______ * ________
           |                   |                   |                  |
matlibP    |  0.0172207sec     |  0.0274508sec     |  0.0477235sec    |   1.12624sec
___________|___________________|___________________|__________________|__________________
           |                   |                   |                  |
eigen      |   4.04E-05sec     |  0.001026sec      |  0.0041806sec    |   0.932621sec
___________|___________________|___________________|__________________|__________________
           |                   |                   |                  |
matlib     |   3.81E-05sec     |  0.0013536sec     |  0.0033088sec    |   1.3958sec
___________|___________________|___________________|__________________|__________________


with optimisations (with the flag -O):

           |                50 X 50                |              500 X 500
___________|_______ + _________|_______ * _________|________ + _______|_______ * ________
           |                   |                   |                  |
matlibP    |  0.0072575sec     |  0.0057076sec     |  0.0488405sec    |   0.326968sec
___________|___________________|___________________|__________________|__________________
           |                   |                   |                  |
eigen      |   1.05e-05sec     |  0.0001023sec     |  0.0010981sec    |   0.0517056sec
___________|___________________|___________________|__________________|__________________
           |                   |                   |                  |
matlib     |   0.0212854sec    |  0.0155175sec     |  0.0691903sec    |   0.374233sec
___________|___________________|___________________|__________________|__________________

Answering the questions:
1.When we compare between the eigen library and the matlib library, we can see that the
performance of both states depends on the size of the matrix and the operation performed.
For example, when creating a small matrix, the performance of our library is better than
the eigen for an add operation, and for the performance multiplication operation, they are
similar (with priority for eigen when we compile with an optimization flag -O).
However, when creating a large matrix, the execution of the eigen is better than our library for
the multiplication operation, and for the add operation the performance is
similar(preferably to the eigen library when we compile with  an optimization flag). It is likely
that .These differences are becase of the action of the algorithms in these actions. For example,
the running time of the algorithm of multiplying our matrix as requested in the exercise is n ^ 3,
when most likely That the running time of the eigen library algorithm is smaller.
As for the parallel performance, we can see that when we are compiling with optimisation flags
then the matlibP is necessarily better than our library, but still not better than the eigen.
However, if we won't compile the code with optimiziation flag the performance of the parallel is
the least of the three.
The parallel advantage is that it performs operations that are independent at each other at the
same time, but on the other hand creating lots of threads delayes its execution.

2.
There is necessarily a difference between the multiplication operations and the add operation for
each library.
The difference is caused from the algorithm operation and the number of calculations required.
When we add matrices, we go through all the elements in the matrix once, that is, we perform
n ^ 2 actions.
However, in multiplying matrices more actions are performed. We perform n ^ 3 operations,
since we go through all n ^ 2 elements but also perform iteration on each row and column
(n more actions).
